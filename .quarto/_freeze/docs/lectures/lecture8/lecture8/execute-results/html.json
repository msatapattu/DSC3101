{
  "hash": "9dd04f83e352f89a9637072a3f1666f2",
  "result": {
    "markdown": "---\ntitle: DSC 3091- Advanced Statistics Applications I\nsubtitle: \"Data Wrangling\"\nauthor: Prof. P. Wijekoon\ninstitute: Department of Statistics and Computer Science \nformat: \n  revealjs:\n      large: true\n      theme: [beige, custom.scss]\n      slide-number: true\n      chalkboard: \n        theme: whiteboard\n      \neditor: visual\n---\n\n\n# Data Wrangling\n\nData wrangling makes it easier to get your data into R in a useful form for visualisation and modelling. Here, we discuss the following three tools.\n\n-   **tibbles** the variant of the data frame.\n\n-   **Data import** in rectangular formats.\n\n-   **tidy data** a consistent way of storing your data that makes transformation, visualisation, and modelling easier.\n\n# Tibbles\n\nTibbles are data frames, which makes easier for data wrangling. Tibbles can be created using the `tibble` package. Tibbles have an enhanced [`print()`](https://rdrr.io/r/base/print.html) method which can be used with large datasets containing complex objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nas_tibble(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 x 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ... with 140 more rows\n```\n:::\n:::\n\n\n# Tibbles\n\nYou can create a new tibble from individual vectors with `tibble()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\ntibble(\n  x = 1:5, \n  y = 1, \n  z = x ^ 2 + y\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 3\n      x     y     z\n  <int> <dbl> <dbl>\n1     1     1     2\n2     2     1     5\n3     3     1    10\n4     4     1    17\n5     5     1    26\n```\n:::\n:::\n\n\n# Tibbles vs. data.frame\n\nTibbles shows only the first 10 rows, and all the columns fit on screen, which makes it much easier to work with large data. In addition to its name, each column reports its data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  a = lubridate::now(),\n  b = lubridate::today(),\n  c = 1:1e3,\n  d = runif(1e3),\n  e = sample(letters, 1e3, replace = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 x 5\n   a                   b              c        d e    \n   <dttm>              <date>     <int>    <dbl> <chr>\n 1 2022-09-12 15:42:27 2022-09-12     1 0.000473 a    \n 2 2022-09-12 15:42:27 2022-09-12     2 0.164    v    \n 3 2022-09-12 15:42:27 2022-09-12     3 0.210    r    \n 4 2022-09-12 15:42:27 2022-09-12     4 0.653    e    \n 5 2022-09-12 15:42:27 2022-09-12     5 0.561    i    \n 6 2022-09-12 15:42:27 2022-09-12     6 0.564    d    \n 7 2022-09-12 15:42:27 2022-09-12     7 0.782    n    \n 8 2022-09-12 15:42:27 2022-09-12     8 0.202    m    \n 9 2022-09-12 15:42:27 2022-09-12     9 0.467    x    \n10 2022-09-12 15:42:27 2022-09-12    10 0.488    b    \n# ... with 990 more rows\n```\n:::\n:::\n\n\n# Tibbles vs. data.frame\n\nConsider the below `flights` data set which shows on-time data for all flights that departed NYC in 2013, in `nycflights13` package. If you want to see only 5 observations, use the below code. The option `width =` `Inf` shows all variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnycflights13::flights %>% \n  print(n = 5, width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n  arr_delay carrier flight tailnum origin dest  air_time distance  hour minute\n      <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl>\n1        11 UA        1545 N14228  EWR    IAH        227     1400     5     15\n2        20 UA        1714 N24211  LGA    IAH        227     1416     5     29\n3        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40\n4       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45\n5       -25 DL         461 N668DN  LGA    ATL        116      762     6      0\n  time_hour          \n  <dttm>             \n1 2013-01-01 05:00:00\n2 2013-01-01 05:00:00\n3 2013-01-01 05:00:00\n4 2013-01-01 05:00:00\n5 2013-01-01 06:00:00\n# ... with 336,771 more rows\n```\n:::\n:::\n\n\n# Tibbles vs. data.frame\n\nTo see the data in the default output of a tibble, use the below codes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(tibble.width = Inf) \nnycflights13::flights %>% \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n   arr_delay carrier flight tailnum origin dest  air_time distance  hour minute\n       <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl>\n 1        11 UA        1545 N14228  EWR    IAH        227     1400     5     15\n 2        20 UA        1714 N24211  LGA    IAH        227     1416     5     29\n 3        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40\n 4       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45\n 5       -25 DL         461 N668DN  LGA    ATL        116      762     6      0\n 6        12 UA        1696 N39463  EWR    ORD        150      719     5     58\n 7        19 B6         507 N516JB  EWR    FLL        158     1065     6      0\n 8       -14 EV        5708 N829AS  LGA    IAD         53      229     6      0\n 9        -8 B6          79 N593JB  JFK    MCO        140      944     6      0\n10         8 AA         301 N3ALAA  LGA    ORD        138      733     6      0\n   time_hour          \n   <dttm>             \n 1 2013-01-01 05:00:00\n 2 2013-01-01 05:00:00\n 3 2013-01-01 05:00:00\n 4 2013-01-01 05:00:00\n 5 2013-01-01 06:00:00\n 6 2013-01-01 05:00:00\n 7 2013-01-01 06:00:00\n 8 2013-01-01 06:00:00\n 9 2013-01-01 06:00:00\n10 2013-01-01 06:00:00\n# ... with 336,766 more rows\n```\n:::\n:::\n\n\n# Data import\n\nTo read plain-text rectangular files into R, use the `readr` package, which is part of the core tidyverse.\n\n-   `read_csv()` reads comma delimited files, `read_csv2()` reads semicolon separated files, `read_tsv()` reads tab delimited files, and `read_delim()` reads in files with any delimiter.\n\n-   `read_fwf()` reads fixed width files. You can specify fields either by their widths with `fwf_widths()` or their position with `fwf_positions()`. `read_table()` reads a common variation of fixed width files where columns are separated by white space.\n\n# Data import\n\n-   `read_log()` reads Apache style log files. (But also check out [webreadr](https://github.com/Ironholds/webreadr) which is built on top of `read_log()` and provides many more helpful tools.)\n\nSuppose you have a csv file named `heights` in a folder called data. Then, to read it use\n\n`heights<-read_csv(\"data/heights.csv\")`\\\nIf some meta data included in the first two lines of the data set, and you want to skip those two lines, use\n\n`heights<-read_csv(\"data/heights.csv\", skip=2)`\n\n# Data import\n\n**Example**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nread_csv(\"The first line of metadata\n  The second line of metadata\n  x,y,z\n  1,2,3\", skip = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n      x     y     z\n  <dbl> <dbl> <dbl>\n1     1     2     3\n```\n:::\n:::\n\n\nIf there is a comment in the data set,use the below codes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"# A comment I want to skip\n  x,y,z\n  1,2,3\", comment = \"#\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n      x     y     z\n  <dbl> <dbl> <dbl>\n1     1     2     3\n```\n:::\n:::\n\n\n# Data import\n\nIf the variable names are not included in the data set, you can specify them and read the data as\\\n`heights<-read_csv(\"data/heights.csv\", col_names = c(\"x\", \"y\", \"z\"))`\n\nIf the missing values are indicated as \".\" in the data set, you can change them to NA as below:\\\n`heights<-read_csv(\"data/heights.csv\", NA= \".\")`\n\n# Data import\n\nIf you data contains other characters such as \\$100, 20% or etc, then to convert them to data use `parse_number()` function.\n\n**Examples**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_number(\"$100\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\nparse_number(\"20%\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\nparse_number(\"It cost $123.45\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123.45\n```\n:::\n\n```{.r .cell-code}\nparse_number(\"$123,456,789\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123456789\n```\n:::\n:::\n\n\n# Data import\n\nTo write dates in a given format, you can use `parse_date()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_date(\"01/02/15\", \"%m/%d/%y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2015-01-02\"\n```\n:::\n\n```{.r .cell-code}\nparse_date(\"01/02/15\", \"%d/%m/%y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2015-02-01\"\n```\n:::\n\n```{.r .cell-code}\nparse_date(\"01/02/15\", \"%y/%m/%d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2001-02-15\"\n```\n:::\n:::\n\n\n# Data import\n\n**Date abbreviations**\n\n+--------------+--------------------------------------------------------------+\n| **Year**     | `%Y` - (4 digits)                                            |\n|              |                                                              |\n|              | `%y` - (2 digits); 00-69 -\\> 2000-2069, 70-99 -\\> 1970-1999. |\n+--------------+--------------------------------------------------------------+\n| **Month**    | `%m` - (2 digits)                                            |\n|              |                                                              |\n|              | `%b` - (abbreviated name, like \"Jan\")                        |\n|              |                                                              |\n|              | `%B` - (full name, \"January\")                                |\n+--------------+--------------------------------------------------------------+\n| **Day**      | `%d` - (2 digits)                                            |\n+--------------+--------------------------------------------------------------+\n\n# Tidy Data\n\nIn tidy data\n\n-   each variable forms a column\n\n-   each observation forms a row\n\n-   each cell is a single measurement\n\nWhen working with tidy data, we can use the same tools in similar ways for different data sets.\n\n`dplyr`, `ggplot2`, and all the other packages in the `tidyverse` are designed to work with tidy data.\n\n# Tidy Data\n\n::: columns\n::: {.column width=\"50%\"}\n![](im1.png)\n:::\n\n::: {.column width=\"50%\"}\n![](im2.png)\n:::\n:::\n\n# Tidy Data\n\nWhat are the advantages of your data to be tidy?\n\n-   The general advantage is that you can select one consistent way to store your data. If you have a consistent data structure, it's easier to learn the tools that work with it since they have an underlying uniformity.\n\n-   When variables are in columns, you can use the vectorised nature of R. Most of the built-in R functions work with vectors of values.\n\n# Tidy Data\n\nRun the following codes and identify which data set/s is/are tidy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntable1\ntable2\ntable3\ntable4a\ntable4b\n```\n:::\n\n\nThese are all representations of the same underlying data, but only `table1` is tidy.\n\n# Tidy Data\n\n**Examples**\n\nRun the following codes.\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute rate per 10,000\nlibrary(dplyr)\ntable1 %>% \n  mutate(rate = cases / population * 10000)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute cases per year\ntable1 %>% \n  count(year, wt = cases)\n```\n:::\n\n:::\n:::\n\n# Tidy Data\n\nIf we have untidy data, how do we make them tidy?\n\nTo do this, you can use the functions `pivot_longer()` and `pivot_wider()` in tidyr.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv ggplot2 3.3.5     v dplyr   1.0.9\nv tidyr   1.2.0     v stringr 1.4.1\nv purrr   0.3.4     v forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  country     `1999` `2000`\n* <chr>        <int>  <int>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n:::\n:::\n\n\nHere, the column names `1999` and `2000` represent values of the `year` variable, and the values of these columns represent values of the `cases` variable. Note that each row represents two observations, but not one.\n\n# Tidy Data\n\nSince **one variable spreads across multiple columns** in `table4a` , we use `pivot_longer()` function to make it tidy as below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ntable4a %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <int>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n:::\n\n\n# Tidy Data\n\nIn table2 data set, **one observation is scattered across multiple rows**. Therefore, we have to use `pivot_wider()` function to make it tidy.\n\n::: columns\n::: {.column width=\"52%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 4\n   country      year type            count\n   <chr>       <int> <chr>           <int>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"48%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2 %>%\n    pivot_wider(names_from = type, values_from = count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n:::\n:::\n\n# Tidy Data\n\n::: columns\n::: {.column width=\"52%\"}\nIn the following data set, we can separate the rate variables to two variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country      year rate             \n* <chr>       <int> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"48%\"}\nWe separate the rate variables to `cases` and `population` variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable3 %>% \n  separate(rate, into = c(\"cases\", \"population\"), convert = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n\n```{.r .cell-code}\n# Add convert=TRUE to preserve the data type.\n```\n:::\n\n:::\n:::\n\n# Tidy Data\n\nWe can also use `sep` option with `separate` function to separate integers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable3 %>% \n  separate(year, into = c(\"century\", \"year\"), sep = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country     century year  rate             \n  <chr>       <chr>   <chr> <chr>            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n```\n:::\n:::\n\n\n# Tidy Data\n\nUsing `unite()` function we can combine multiple columns into a single column.\n\nNow, we use `unite()` function to rejoin the *century* and *year* columns that we created in the previous example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntable5<-table3 %>% \n  separate(year, into = c(\"century\", \"year\"), sep = 2)\ntable5 %>% \n  unite(new, century, year, sep = \"\")# Run without sep=\"\" option, and see the difference\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     new   rate             \n  <chr>       <chr> <chr>            \n1 Afghanistan 1999  745/19987071     \n2 Afghanistan 2000  2666/20595360    \n3 Brazil      1999  37737/172006362  \n4 Brazil      2000  80488/174504898  \n5 China       1999  212258/1272915272\n6 China       2000  213766/1280428583\n```\n:::\n:::\n\n\n# Tidy Data (Missing values)\n\nA value can be missing in two ways, **Explicitly** (i.e. flagged with `NA`), **Implicitly** (i.e. simply not present in the data).\n\nIn this data set, the return for the fourth quarter of 2015 is explicitly missing, and the return for the first quarter of 2016 is implicitly missing\n\n::: columns\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks <- tibble(\nyear= c(2015, 2015, 2015, 2015, 2016, 2016, 2016),\nqtr = c(   1,    2,    3,    4,    2,    3,    4),\nreturn = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)\n)\nstocks\n```\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 3\n   year   qtr return\n  <dbl> <dbl>  <dbl>\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     2   0.92\n6  2016     3   0.17\n7  2016     4   2.66\n```\n:::\n:::\n\n:::\n:::\n\n# Tidy Data\n\nTo make missing values explicit in tidy data, we can use `complete()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks %>% \n  complete(year, qtr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 3\n   year   qtr return\n  <dbl> <dbl>  <dbl>\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     1  NA   \n6  2016     2   0.92\n7  2016     3   0.17\n8  2016     4   2.66\n```\n:::\n:::\n\n\n# Class work\n\n-   Make `table4b` data set tidy, and combine it with `table4a` data set.\n\n-   Refer the case study (12.6) shown in https://r4ds.had.co.nz/tidy-data.html, and understand the tools that we need to use for a real data set. Apply those tools to the COVID-19 confirmed data from John Hopkins University. You can access the data using the following codes:\n\n    `library(readr)`\\\n    `confirmed<-read_csv(\"https://raw.githubusercontent.com/`\n\n    `CSSEGISandData/COVID-19/master/csse_covid_19_data/`\n\n    `csse_covid_19_time_series/`\n\n    `time_series_covid19_confirmed_global.csv\")`\\\n    `head(confirmed)`\n\n# Some Useful Links ...\n\n-   Wickham, H (2014). *Tidy Data*. Journal of Statistical Software 58 (10). [jstatsoft.org/v59/i10/](http://www.jstatsoft.org/v59/i10/)\n\n-   Grolemund, G & Wickham, H (2016). R for Data Science, [https://r4ds.had.co.nz](https://r4ds.had.co.nz/)\n\n-   Introduction to Tidy Data in R: https://stat2labs.sites.grinnell.edu/Handouts/rtutorials/IntroTidyData.html\n\n-   tidyr: https://tidyr.tidyverse.org/\n\n-   A ModernDive into R and the Tidyverse: https://moderndive.com/index.html\n\n\\\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}