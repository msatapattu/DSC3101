{
  "hash": "e5e5424e931639bd4ae9b2f32d2b9c80",
  "result": {
    "markdown": "---\ntitle: DSC 3091- Advanced Statistics Applications I\nsubtitle: \"Data Wrangling II\"\nauthor: Prof. P. Wijekoon\ninstitute: Department of Statistics and Computer Science \nformat: \n  revealjs:\n      large: true\n      theme: [beige, custom.scss]\n      slide-number: true\n      chalkboard: \n        theme: whiteboard\n      \neditor: visual\n---\n\n\n# **Data manipulation with `dplyr`**\n\n-   The package `dplyr` was written by the most popular R programmer Hadley Wickham who has written many useful R packages.\n\n-   The package contains a set of functions (or \"verbs\") that perform common data manipulation operations such as filtering for rows, selecting specific columns, re-ordering rows, adding new columns and summarizing data.\n\n-   Hence, it is called a grammar of data manipulation.\n\n# **Data manipulation with `dplyr`**\n\nThe functions (verbs) in the package `dplyr` are\n\n| Function                                                              | Description          | **Equivalent SQL** |\n|------------------|------------------------------|------------------------|\n| [`select()`](https://dplyr.tidyverse.org/reference/select.html)       | Selecting variables  | SELECT             |\n| [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)       | Filter (subset) rows | WHERE              |\n| [`group_by()`](https://dplyr.tidyverse.org/reference/)                | Group the data       | GROUP BY           |\n| [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html) | Summarise data       | \\-                 |\n| [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)     | Sort the data        | ORDER BY           |\n| [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)       | Create new variables | COLUMN ALIAS       |\n| [`join()`](https://dplyr.tidyverse.org/reference/)                    | Joining data tables  | JOIN               |\n\n# **Data manipulation with `dplyr`**\n\nTo understand these functions, we use the `starwars` data set in the dplyr package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tibble)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nas_tibble(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 14\n   name        height  mass hair_~1 skin_~2 eye_c~3 birth~4 sex   gender homew~5\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Luke Skywa~    172    77 blond   fair    blue       19   male  mascu~ Tatooi~\n 2 C-3PO          167    75 <NA>    gold    yellow    112   none  mascu~ Tatooi~\n 3 R2-D2           96    32 <NA>    white,~ red        33   none  mascu~ Naboo  \n 4 Darth Vader    202   136 none    white   yellow     41.9 male  mascu~ Tatooi~\n 5 Leia Organa    150    49 brown   light   brown      19   fema~ femin~ Aldera~\n 6 Owen Lars      178   120 brown,~ light   blue       52   male  mascu~ Tatooi~\n 7 Beru White~    165    75 brown   light   blue       47   fema~ femin~ Tatooi~\n 8 R5-D4           97    32 <NA>    white,~ red        NA   none  mascu~ Tatooi~\n 9 Biggs Dark~    183    84 black   light   brown      24   male  mascu~ Tatooi~\n10 Obi-Wan Ke~    182    77 auburn~ fair    blue-g~    57   male  mascu~ Stewjon\n# ... with 77 more rows, 4 more variables: species <chr>, films <list>,\n#   vehicles <list>, starships <list>, and abbreviated variable names\n#   1: hair_color, 2: skin_color, 3: eye_color, 4: birth_year, 5: homeworld\n```\n:::\n:::\n\n\n# **Data manipulation with `dplyr`**\n\nNow we select the data related to species `Droid` using [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) function as below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nstarwars %>% \n  filter(species == \"Droid\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 14\n  name   height  mass hair_color skin_color eye_c~1 birth~2 sex   gender homew~3\n  <chr>   <int> <dbl> <chr>      <chr>      <chr>     <dbl> <chr> <chr>  <chr>  \n1 C-3PO     167    75 <NA>       gold       yellow      112 none  mascu~ Tatooi~\n2 R2-D2      96    32 <NA>       white, bl~ red          33 none  mascu~ Naboo  \n3 R5-D4      97    32 <NA>       white, red red          NA none  mascu~ Tatooi~\n4 IG-88     200   140 none       metal      red          15 none  mascu~ <NA>   \n5 R4-P17     96    NA none       silver, r~ red, b~      NA none  femin~ <NA>   \n6 BB8        NA    NA none       none       black        NA none  mascu~ <NA>   \n# ... with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names 1: eye_color,\n#   2: birth_year, 3: homeworld\n```\n:::\n:::\n\n\n# **Data manipulation with `dplyr`**\n\nNow we use [`select()`](https://dplyr.tidyverse.org/reference/select.html) function to select some specific variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(name, ends_with(\"color\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 4\n   name               hair_color    skin_color  eye_color\n   <chr>              <chr>         <chr>       <chr>    \n 1 Luke Skywalker     blond         fair        blue     \n 2 C-3PO              <NA>          gold        yellow   \n 3 R2-D2              <NA>          white, blue red      \n 4 Darth Vader        none          white       yellow   \n 5 Leia Organa        brown         light       brown    \n 6 Owen Lars          brown, grey   light       blue     \n 7 Beru Whitesun lars brown         light       blue     \n 8 R5-D4              <NA>          white, red  red      \n 9 Biggs Darklighter  black         light       brown    \n10 Obi-Wan Kenobi     auburn, white fair        blue-gray\n# ... with 77 more rows\n```\n:::\n:::\n\n\n# **Data manipulation with `dplyr`**\n\nTo create a new variable called bmi using the existing variables mass and height, we use [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) function, and select some specific variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  mutate(name, bmi = mass / ((height / 100)  ^ 2)) %>%\n  select(name:mass, bmi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 4\n   name               height  mass   bmi\n   <chr>               <int> <dbl> <dbl>\n 1 Luke Skywalker        172    77  26.0\n 2 C-3PO                 167    75  26.9\n 3 R2-D2                  96    32  34.7\n 4 Darth Vader           202   136  33.3\n 5 Leia Organa           150    49  21.8\n 6 Owen Lars             178   120  37.9\n 7 Beru Whitesun lars    165    75  27.5\n 8 R5-D4                  97    32  34.0\n 9 Biggs Darklighter     183    84  25.1\n10 Obi-Wan Kenobi        182    77  23.2\n# ... with 77 more rows\n```\n:::\n:::\n\n\n# **Data manipulation with `dplyr`**\n\nUse [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) function to arrange the variable `mass` in ascending order as `arrange(mass)`, and to arrange in descending order, use `arrange(desc(mass))` as below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  arrange(desc(mass))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 14\n   name        height  mass hair_~1 skin_~2 eye_c~3 birth~4 sex   gender homew~5\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Jabba Desi~    175  1358 <NA>    green-~ orange    600   herm~ mascu~ Nal Hu~\n 2 Grievous       216   159 none    brown,~ green,~    NA   male  mascu~ Kalee  \n 3 IG-88          200   140 none    metal   red        15   none  mascu~ <NA>   \n 4 Darth Vader    202   136 none    white   yellow     41.9 male  mascu~ Tatooi~\n 5 Tarfful        234   136 brown   brown   blue       NA   male  mascu~ Kashyy~\n 6 Owen Lars      178   120 brown,~ light   blue       52   male  mascu~ Tatooi~\n 7 Bossk          190   113 none    green   red        53   male  mascu~ Trando~\n 8 Chewbacca      228   112 brown   unknown blue      200   male  mascu~ Kashyy~\n 9 Jek Tono P~    180   110 brown   fair    blue       NA   male  mascu~ Bestin~\n10 Dexter Jet~    198   102 none    brown   yellow     NA   male  mascu~ Ojom   \n# ... with 77 more rows, 4 more variables: species <chr>, films <list>,\n#   vehicles <list>, starships <list>, and abbreviated variable names\n#   1: hair_color, 2: skin_color, 3: eye_color, 4: birth_year, 5: homeworld\n```\n:::\n:::\n\n\n# **Data manipulation with `dplyr`**\n\nNow, we use [`summarise()`](https://dplyr.tidyverse.org/reference/summarise) function to get some summaries of data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n    group_by(species) %>%\n  summarise(\n    n = n(),\n    mean_mass = mean(mass, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38 x 3\n   species       n mean_mass\n   <chr>     <int>     <dbl>\n 1 Aleena        1      15  \n 2 Besalisk      1     102  \n 3 Cerean        1      82  \n 4 Chagrian      1     NaN  \n 5 Clawdite      1      55  \n 6 Droid         6      69.8\n 7 Dug           1      40  \n 8 Ewok          1      20  \n 9 Geonosian     1      80  \n10 Gungan        3      74  \n# ... with 28 more rows\n```\n:::\n:::\n\n\n# **Data manipulation with `dplyr`**\n\nNow, we filter the observations from the summarise data with n \\> 1 and mean_mass \\> 50.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  group_by(species) %>%\n  summarise(\n    n = n(),\n    mean_mass = mean(mass, na.rm = TRUE)\n  ) %>%\n  filter(\n    n > 1,\n    mean_mass > 50\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 3\n  species      n mean_mass\n  <chr>    <int>     <dbl>\n1 Droid        6      69.8\n2 Gungan       3      74  \n3 Human       35      82.8\n4 Kaminoan     2      88  \n5 Mirialan     2      53.1\n6 Twi'lek      2      55  \n7 Wookiee      2     124  \n8 Zabrak       2      80  \n```\n:::\n:::\n\n\n# Class works\n\nThe sampledata.csv contains income generated by states in USA from year 2002 to 2015. Download the data set by clicking on this link - [**Dataset**](https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv) and then right click and hit Save as option.\n\n\\(a\\) Selects variables from \"Index\" to \"Y2006\".\n\n\\(b\\) Drop variables \"Index\", and \"State\" variables from data.\n\n\\(c\\) Filter rows in which Index is equal to A.\n\n\\(d\\) Filter rows having 'A' and 'C' in column 'Index'.\n\n\\(e\\) Filter rows 'A' and 'C' from 'Index' **and** income greater than 1.2 million in Year 2006.\n\n------------------------------------------------------------------------\n\n\\(f\\) Filter rows 'A' and 'C' from 'Index' **or** income greater than 1.2 million in Year 2006.\n\n\\(g\\) Find the mean and median for the variable Y2012.\n\n\\(h\\) Find mean and median of Y2011 and Y2012.\n\n\\(i\\) Arrange variable Y2011 by variable Index in ascending order.\n\n\\(j\\) Calculate count and mean of variables Y2011 and Y2012 by variable Index.\n\n\\(k\\) Calculate the variable rate=Y2011/Y2012.\n\n\\(l\\) Calculate the cumulative sum of Y2011 and assign it to total, and select variables index, Y2011 and total.\n\n# Class works\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nmydata=read_csv(\"C:/D/Lecture Notes/Multivariate methods/categorical data analysis/lecture9/sampledata.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n-- Column specification --------------------------------------------------------\ncols(\n  Index = col_character(),\n  State = col_character(),\n  Y2002 = col_double(),\n  Y2003 = col_double(),\n  Y2004 = col_double(),\n  Y2005 = col_double(),\n  Y2006 = col_double(),\n  Y2007 = col_double(),\n  Y2008 = col_double(),\n  Y2009 = col_double(),\n  Y2010 = col_double(),\n  Y2011 = col_double(),\n  Y2012 = col_double(),\n  Y2013 = col_double(),\n  Y2014 = col_double(),\n  Y2015 = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\nlibrary(tibble)\nmydata=as.tibble(mydata)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nPlease use `as_tibble()` instead.\nThe signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 x 16\n   Index State     Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010\n   <chr> <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 A     Alabama  1.30e6 1.32e6 1.12e6 1.49e6 1.11e6 1.44e6 1.95e6 1.94e6 1.24e6\n 2 A     Alaska   1.17e6 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6\n 3 A     Arizona  1.74e6 1.97e6 1.38e6 1.78e6 1.10e6 1.11e6 1.75e6 1.55e6 1.30e6\n 4 A     Arkansas 1.49e6 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6\n 5 C     Califor~ 1.69e6 1.68e6 1.89e6 1.48e6 1.74e6 1.81e6 1.49e6 1.66e6 1.62e6\n 6 C     Colorado 1.34e6 1.88e6 1.89e6 1.24e6 1.87e6 1.81e6 1.88e6 1.75e6 1.91e6\n 7 C     Connect~ 1.61e6 1.23e6 1.18e6 1.52e6 1.84e6 1.98e6 1.76e6 1.97e6 1.97e6\n 8 D     Delaware 1.33e6 1.27e6 1.71e6 1.40e6 1.44e6 1.30e6 1.76e6 1.55e6 1.37e6\n 9 D     Distric~ 1.11e6 1.99e6 1.37e6 1.83e6 1.80e6 1.60e6 1.19e6 1.74e6 1.71e6\n10 F     Florida  1.96e6 1.47e6 1.42e6 1.36e6 1.34e6 1.28e6 1.76e6 1.82e6 1.20e6\n# ... with 41 more rows, and 5 more variables: Y2011 <dbl>, Y2012 <dbl>,\n#   Y2013 <dbl>, Y2014 <dbl>, Y2015 <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(a\\) Selects variables \"Index\" to \"Y2006\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  select (Index:Y2006)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 x 7\n   Index State                  Y2002   Y2003   Y2004   Y2005   Y2006\n   <chr> <chr>                  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 A     Alabama              1296530 1317711 1118631 1492583 1107408\n 2 A     Alaska               1170302 1960378 1818085 1447852 1861639\n 3 A     Arizona              1742027 1968140 1377583 1782199 1102568\n 4 A     Arkansas             1485531 1994927 1119299 1947979 1669191\n 5 C     California           1685349 1675807 1889570 1480280 1735069\n 6 C     Colorado             1343824 1878473 1886149 1236697 1871471\n 7 C     Connecticut          1610512 1232844 1181949 1518933 1841266\n 8 D     Delaware             1330403 1268673 1706751 1403759 1441351\n 9 D     District of Columbia 1111437 1993741 1374643 1827949 1803852\n10 F     Florida              1964626 1468852 1419738 1362787 1339608\n# ... with 41 more rows\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(b\\) Drop variables \"Index\", and \"State\" variables from data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  select (-Index, -State)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 x 14\n     Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010  Y2011  Y2012\n     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 1296530 1.32e6 1.12e6 1.49e6 1.11e6 1.44e6 1.95e6 1.94e6 1.24e6 1.44e6 1.19e6\n 2 1170302 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6 1.23e6 1.51e6\n 3 1742027 1.97e6 1.38e6 1.78e6 1.10e6 1.11e6 1.75e6 1.55e6 1.30e6 1.13e6 1.91e6\n 4 1485531 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6 1.93e6 1.22e6\n 5 1685349 1.68e6 1.89e6 1.48e6 1.74e6 1.81e6 1.49e6 1.66e6 1.62e6 1.64e6 1.92e6\n 6 1343824 1.88e6 1.89e6 1.24e6 1.87e6 1.81e6 1.88e6 1.75e6 1.91e6 1.67e6 1.49e6\n 7 1610512 1.23e6 1.18e6 1.52e6 1.84e6 1.98e6 1.76e6 1.97e6 1.97e6 1.95e6 1.23e6\n 8 1330403 1.27e6 1.71e6 1.40e6 1.44e6 1.30e6 1.76e6 1.55e6 1.37e6 1.32e6 1.98e6\n 9 1111437 1.99e6 1.37e6 1.83e6 1.80e6 1.60e6 1.19e6 1.74e6 1.71e6 1.35e6 1.98e6\n10 1964626 1.47e6 1.42e6 1.36e6 1.34e6 1.28e6 1.76e6 1.82e6 1.20e6 1.50e6 1.13e6\n# ... with 41 more rows, and 3 more variables: Y2013 <dbl>, Y2014 <dbl>,\n#   Y2015 <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(c\\) Filter rows in which Index is equal to A.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  filter(Index == \"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 16\n  Index State      Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010\n  <chr> <chr>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 A     Alabama  1296530 1.32e6 1.12e6 1.49e6 1.11e6 1.44e6 1.95e6 1.94e6 1.24e6\n2 A     Alaska   1170302 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6\n3 A     Arizona  1742027 1.97e6 1.38e6 1.78e6 1.10e6 1.11e6 1.75e6 1.55e6 1.30e6\n4 A     Arkansas 1485531 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6\n# ... with 5 more variables: Y2011 <dbl>, Y2012 <dbl>, Y2013 <dbl>,\n#   Y2014 <dbl>, Y2015 <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(d\\) Filter rows having 'A' and 'C' in column 'Index'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  filter(Index %in% c(\"A\", \"C\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 16\n  Index State      Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010\n  <chr> <chr>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 A     Alabama   1.30e6 1.32e6 1.12e6 1.49e6 1.11e6 1.44e6 1.95e6 1.94e6 1.24e6\n2 A     Alaska    1.17e6 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6\n3 A     Arizona   1.74e6 1.97e6 1.38e6 1.78e6 1.10e6 1.11e6 1.75e6 1.55e6 1.30e6\n4 A     Arkansas  1.49e6 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6\n5 C     Californ~ 1.69e6 1.68e6 1.89e6 1.48e6 1.74e6 1.81e6 1.49e6 1.66e6 1.62e6\n6 C     Colorado  1.34e6 1.88e6 1.89e6 1.24e6 1.87e6 1.81e6 1.88e6 1.75e6 1.91e6\n7 C     Connecti~ 1.61e6 1.23e6 1.18e6 1.52e6 1.84e6 1.98e6 1.76e6 1.97e6 1.97e6\n# ... with 5 more variables: Y2011 <dbl>, Y2012 <dbl>, Y2013 <dbl>,\n#   Y2014 <dbl>, Y2015 <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(e\\) Filter rows 'A' and 'C' from 'Index' **and** income greater than 1.2 million in Year 2006.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  filter(Index %in% c(\"A\", \"C\")& Y2006 >= 1200000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 16\n  Index State      Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010\n  <chr> <chr>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 A     Alaska    1.17e6 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6\n2 A     Arkansas  1.49e6 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6\n3 C     Californ~ 1.69e6 1.68e6 1.89e6 1.48e6 1.74e6 1.81e6 1.49e6 1.66e6 1.62e6\n4 C     Colorado  1.34e6 1.88e6 1.89e6 1.24e6 1.87e6 1.81e6 1.88e6 1.75e6 1.91e6\n5 C     Connecti~ 1.61e6 1.23e6 1.18e6 1.52e6 1.84e6 1.98e6 1.76e6 1.97e6 1.97e6\n# ... with 5 more variables: Y2011 <dbl>, Y2012 <dbl>, Y2013 <dbl>,\n#   Y2014 <dbl>, Y2015 <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(f\\) Filter rows 'A' and 'C' from 'Index' **or** income greater than 1.2 million in Year 2006.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  filter(Index %in% c(\"A\", \"C\")| Y2006 >= 1200000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 47 x 16\n   Index State     Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010\n   <chr> <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 A     Alabama  1.30e6 1.32e6 1.12e6 1.49e6 1.11e6 1.44e6 1.95e6 1.94e6 1.24e6\n 2 A     Alaska   1.17e6 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6\n 3 A     Arizona  1.74e6 1.97e6 1.38e6 1.78e6 1.10e6 1.11e6 1.75e6 1.55e6 1.30e6\n 4 A     Arkansas 1.49e6 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6\n 5 C     Califor~ 1.69e6 1.68e6 1.89e6 1.48e6 1.74e6 1.81e6 1.49e6 1.66e6 1.62e6\n 6 C     Colorado 1.34e6 1.88e6 1.89e6 1.24e6 1.87e6 1.81e6 1.88e6 1.75e6 1.91e6\n 7 C     Connect~ 1.61e6 1.23e6 1.18e6 1.52e6 1.84e6 1.98e6 1.76e6 1.97e6 1.97e6\n 8 D     Delaware 1.33e6 1.27e6 1.71e6 1.40e6 1.44e6 1.30e6 1.76e6 1.55e6 1.37e6\n 9 D     Distric~ 1.11e6 1.99e6 1.37e6 1.83e6 1.80e6 1.60e6 1.19e6 1.74e6 1.71e6\n10 F     Florida  1.96e6 1.47e6 1.42e6 1.36e6 1.34e6 1.28e6 1.76e6 1.82e6 1.20e6\n# ... with 37 more rows, and 5 more variables: Y2011 <dbl>, Y2012 <dbl>,\n#   Y2013 <dbl>, Y2014 <dbl>, Y2015 <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(g\\) Find the mean and median for the variable Y2012.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  summarise(mean2012 = mean(Y2012), median2012=median(Y2012))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  mean2012 median2012\n     <dbl>      <dbl>\n1 1591135.    1643855\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(h\\) Find mean and median of Y2011 and Y2012.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  summarise(mean2011=mean(Y2011), mean2012=mean(Y2012),median2011=median(Y2011), median2012=median(Y2012), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 5\n  mean2011 mean2012 median2011 median2012 na.rm\n     <dbl>    <dbl>      <dbl>      <dbl> <lgl>\n1 1574968. 1591135.    1575533    1643855 TRUE \n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(i\\) Arrange variable Y2011 by variable Index in ascending order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  arrange(Index, Y2011)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 x 16\n   Index State     Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010\n   <chr> <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 A     Arizona  1.74e6 1.97e6 1.38e6 1.78e6 1.10e6 1.11e6 1.75e6 1.55e6 1.30e6\n 2 A     Alaska   1.17e6 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6\n 3 A     Alabama  1.30e6 1.32e6 1.12e6 1.49e6 1.11e6 1.44e6 1.95e6 1.94e6 1.24e6\n 4 A     Arkansas 1.49e6 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6\n 5 C     Califor~ 1.69e6 1.68e6 1.89e6 1.48e6 1.74e6 1.81e6 1.49e6 1.66e6 1.62e6\n 6 C     Colorado 1.34e6 1.88e6 1.89e6 1.24e6 1.87e6 1.81e6 1.88e6 1.75e6 1.91e6\n 7 C     Connect~ 1.61e6 1.23e6 1.18e6 1.52e6 1.84e6 1.98e6 1.76e6 1.97e6 1.97e6\n 8 D     Delaware 1.33e6 1.27e6 1.71e6 1.40e6 1.44e6 1.30e6 1.76e6 1.55e6 1.37e6\n 9 D     Distric~ 1.11e6 1.99e6 1.37e6 1.83e6 1.80e6 1.60e6 1.19e6 1.74e6 1.71e6\n10 F     Florida  1.96e6 1.47e6 1.42e6 1.36e6 1.34e6 1.28e6 1.76e6 1.82e6 1.20e6\n# ... with 41 more rows, and 5 more variables: Y2011 <dbl>, Y2012 <dbl>,\n#   Y2013 <dbl>, Y2014 <dbl>, Y2015 <dbl>\n```\n:::\n\n```{.r .cell-code}\n# To arrange decending order use desc(Y2011).\n```\n:::\n\n\n------------------------------------------------------------------------\n\n\\(j\\) Calculate count and mean of variables Y2011 and Y2012 by variable Index.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  group_by(Index) %>%\n  summarise(n = n(),mean2011=mean(Y2011), mean2012=mean(Y2012)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 x 4\n   Index     n mean2011 mean2012\n   <chr> <int>    <dbl>    <dbl>\n 1 A         4 1432642. 1455876 \n 2 C         3 1750357  1547326 \n 3 D         2 1336059  1981868.\n 4 F         1 1497051  1131928 \n 5 G         1 1851245  1850111 \n 6 H         1 1902816  1695126 \n 7 I         4 1690170. 1687056.\n 8 K         2 1489353  1899772.\n 9 L         1 1210385  1234234 \n10 M         8 1582714. 1586091.\n11 N         8 1448351. 1470316.\n12 O         3 1882111. 1602463.\n13 P         1 1483292  1290329 \n14 R         1 1781016  1909119 \n15 S         2 1381724  1671744 \n16 T         2 1724080. 1865786.\n17 U         1 1288285  1108281 \n18 V         2 1482143  1488651 \n19 W         4 1711341. 1660192.\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(k\\) Calculate the variable rate=Y2011/Y2012.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  mutate(rate=Y2011/Y2012)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 x 17\n   Index State     Y2002  Y2003  Y2004  Y2005  Y2006  Y2007  Y2008  Y2009  Y2010\n   <chr> <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 A     Alabama  1.30e6 1.32e6 1.12e6 1.49e6 1.11e6 1.44e6 1.95e6 1.94e6 1.24e6\n 2 A     Alaska   1.17e6 1.96e6 1.82e6 1.45e6 1.86e6 1.47e6 1.55e6 1.44e6 1.63e6\n 3 A     Arizona  1.74e6 1.97e6 1.38e6 1.78e6 1.10e6 1.11e6 1.75e6 1.55e6 1.30e6\n 4 A     Arkansas 1.49e6 1.99e6 1.12e6 1.95e6 1.67e6 1.80e6 1.19e6 1.63e6 1.67e6\n 5 C     Califor~ 1.69e6 1.68e6 1.89e6 1.48e6 1.74e6 1.81e6 1.49e6 1.66e6 1.62e6\n 6 C     Colorado 1.34e6 1.88e6 1.89e6 1.24e6 1.87e6 1.81e6 1.88e6 1.75e6 1.91e6\n 7 C     Connect~ 1.61e6 1.23e6 1.18e6 1.52e6 1.84e6 1.98e6 1.76e6 1.97e6 1.97e6\n 8 D     Delaware 1.33e6 1.27e6 1.71e6 1.40e6 1.44e6 1.30e6 1.76e6 1.55e6 1.37e6\n 9 D     Distric~ 1.11e6 1.99e6 1.37e6 1.83e6 1.80e6 1.60e6 1.19e6 1.74e6 1.71e6\n10 F     Florida  1.96e6 1.47e6 1.42e6 1.36e6 1.34e6 1.28e6 1.76e6 1.82e6 1.20e6\n# ... with 41 more rows, and 6 more variables: Y2011 <dbl>, Y2012 <dbl>,\n#   Y2013 <dbl>, Y2014 <dbl>, Y2015 <dbl>, rate <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\\(l\\) Calculate the cumulative sum of Y2011 and assign it to total, and select variables index, Y2011 and total.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata %>%\n  mutate(total=cumsum(Y2011))%>% \n  select(Index,Y2011, total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 x 3\n   Index   Y2011    total\n   <chr>   <dbl>    <dbl>\n 1 A     1440756  1440756\n 2 A     1230866  2671622\n 3 A     1130709  3802331\n 4 A     1928238  5730569\n 5 C     1639670  7370239\n 6 C     1665877  9036116\n 7 C     1945524 10981640\n 8 D     1318669 12300309\n 9 D     1353449 13653758\n10 F     1497051 15150809\n# ... with 41 more rows\n```\n:::\n:::\n\n\n# **Relational data**\n\nSuppose we have created data tables which are related to each other. These type of data tables are called relational data. When working with relational data we may want to combine information from different data tables. That can be done in different ways using `dplyr` package.\n\nThis concept is similar to the *relational* database management system (or `RDBMS`) using `SQL`. Using R, we can do this by using `dplyr` package, which is somewhat easier to use than `SQL`, since `dplyr` is specialised to do data analysis.\n\n# **Relational data**\n\n::: columns\n::: {.column width=\"40%\"}\nWe have already worked with `flights` data table in `nycflights13` package. In the same package, there are 4 other tibbles (airlines, airports, planes, weather) which are related with `flights` data table.\n:::\n\n::: {.column width=\"60%\"}\n![](rela.png)\n:::\n:::\n\n# **Relational data**\n\n-   `flights` connects to `planes` via `tailnum` variable.\n\n-   `flights` connects to `airlines` via `carrier` variable.\n\n-   `flights` connects to `airports` via the `origin` and `dest` variables.\n\n-   `flights` connects to `weather` via `origin`, `year`, `month`, `day` and `hour` variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check variables in each tibble\nlibrary(tidyverse)\nlibrary(nycflights13)\nflights\nairlines\nairports\nplanes\nweather\n```\n:::\n\n\n# **Relational data**\n\nTo connect each pair of tables we use unique identifiers called **keys**.\n\n-   **primary key** - uniquely identifies an observation in its own table.\n\n-   **foreign key** - uniquely identifies an observation in another table.\n\n-   A variable can be both a primary key *and* a foreign key.\n\n-   A primary key and the corresponding foreign key in another table form a **relation**\n\n-   Relations are typically one-to-many.\n\n# **Relational data**\n\nUse [`dm` package](https://cynkra.github.io/dm/articles/tech-dm-draw.html) to get some details about the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dm' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dm'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n```{.r .cell-code}\ndm <- dm_nycflights13(cycle = TRUE)\ndm %>%\n  dm_draw()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-cedd01ed76b031b829e4\" style=\"width:100%;height:464px;\" class=\"grViz html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-cedd01ed76b031b829e4\">{\"x\":{\"diagram\":\"#data_model\\ndigraph {\\ngraph [rankdir=LR tooltip=\\\"Data Model\\\" ]\\n\\nnode [margin=0 fontcolor = \\\"#444444\\\" ]\\n\\nedge [color = \\\"#555555\\\", arrowsize = 1, ]\\n\\npack=true\\npackmode= \\\"node\\\"\\n\\n  \\\"airlines\\\" [id = \\\"airlines\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#9E5320AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#ED7D31FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">airlines<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FBE5D5FF\\\" PORT=\\\"carrier\\\"><U>carrier<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"airports\\\" [id = \\\"airports\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#9E5320AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#ED7D31FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">airports<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FBE5D5FF\\\" PORT=\\\"faa\\\"><U>faa<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"flights\\\" [id = \\\"flights\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#3C678EAA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#5B9BD5FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">flights<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"carrier\\\">carrier<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"tailnum\\\">tailnum<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"origin\\\">origin<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"dest\\\">dest<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"origin, time_hour\\\">origin, time_hour<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"planes\\\" [id = \\\"planes\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#9E5320AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#ED7D31FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">planes<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FBE5D5FF\\\" PORT=\\\"tailnum\\\"><U>tailnum<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"weather\\\" [id = \\\"weather\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#4A732FAA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#70AD47FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">weather<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#E2EEDAFF\\\" PORT=\\\"origin, time_hour\\\"><U>origin, time_hour<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n\\\"flights\\\":\\\"carrier\\\"->\\\"airlines\\\":\\\"carrier\\\" [id=\\\"flights_1\\\"]\\n\\\"flights\\\":\\\"origin\\\"->\\\"airports\\\":\\\"faa\\\" [id=\\\"flights_2\\\"]\\n\\\"flights\\\":\\\"dest\\\"->\\\"airports\\\":\\\"faa\\\" [id=\\\"flights_3\\\"]\\n\\\"flights\\\":\\\"tailnum\\\"->\\\"planes\\\":\\\"tailnum\\\" [id=\\\"flights_4\\\"]\\n\\\"flights\\\":\\\"origin, time_hour\\\"->\\\"weather\\\":\\\"origin, time_hour\\\" [id=\\\"flights_5\\\"]\\n}\",\"config\":{\"engine\":null,\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nTo get details all primary keys use the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#To get all primary keys\ndm %>%\n  dm_get_all_pks()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 2\n  table    pk_col           \n  <chr>    <keys>           \n1 airlines carrier          \n2 airports faa              \n3 planes   tailnum          \n4 weather  origin, time_hour\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nUse the following codes to check the suitability of each variable of a data set to serve as a primary key.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndm %>%\n  dm_enum_pk_candidates(airports)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 3\n  columns candidate why                                                         \n  <keys>  <lgl>     <chr>                                                       \n1 faa     TRUE      \"\"                                                          \n2 name    TRUE      \"\"                                                          \n3 lat     TRUE      \"\"                                                          \n4 lon     TRUE      \"\"                                                          \n5 alt     FALSE     \"has duplicate values: 30 (4), 13 (3), 9 (2), 19 (2), 26 (2~\n6 tz      FALSE     \"has duplicate values: -5 (48), -6 (21), -8 (12), -7 (4)\"   \n7 dst     FALSE     \"has duplicate values: A (84), N (2)\"                       \n8 tzone   FALSE     \"has duplicate values: America/New_York (48), America/Chica~\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n-   We can identify foreign keys by using the function `dm_enum_fk_candidates()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndm %>%\n  dm_enum_fk_candidates(flights, airlines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 x 3\n   columns        candidate why                                                 \n   <keys>         <lgl>     <chr>                                               \n 1 carrier        TRUE      \"\"                                                  \n 2 year           FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n 3 month          FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n 4 day            FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n 5 dep_time       FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n 6 sched_dep_time FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n 7 dep_delay      FALSE     \"Can't combine `value1` <double> and `value1` <char~\n 8 arr_time       FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n 9 sched_arr_time FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n10 arr_delay      FALSE     \"Can't combine `value1` <double> and `value1` <char~\n11 flight         FALSE     \"Can't combine `value1` <integer> and `value1` <cha~\n12 tailnum        FALSE     \"values of `flights$tailnum` not in `airlines$carri~\n13 origin         FALSE     \"values of `flights$origin` not in `airlines$carrie~\n14 dest           FALSE     \"values of `flights$dest` not in `airlines$carrier`~\n15 air_time       FALSE     \"Can't combine `value1` <double> and `value1` <char~\n16 distance       FALSE     \"Can't combine `value1` <double> and `value1` <char~\n17 hour           FALSE     \"Can't combine `value1` <double> and `value1` <char~\n18 minute         FALSE     \"Can't combine `value1` <double> and `value1` <char~\n19 time_hour      FALSE     \"Can't combine `value1` <datetime<America/New_York>~\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n-   We can extract a summary of all foreign key relations present in a `dm` object using `dm_get_all_fks()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndm %>% \n  dm_get_all_fks()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 5\n  child_table child_fk_cols     parent_table parent_key_cols   on_delete\n  <chr>       <keys>            <chr>        <keys>            <chr>    \n1 flights     carrier           airlines     carrier           no_action\n2 flights     origin            airports     faa               no_action\n3 flights     dest              airports     faa               no_action\n4 flights     tailnum           planes       tailnum           no_action\n5 flights     origin, time_hour weather      origin, time_hour no_action\n```\n:::\n:::\n\n\n# **Relational data**\n\nNow, we select only 6 variables from `flights` data set to work with easily, and name it as `flights2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <- flights %>% \n  select(year:day, hour, tailnum, carrier)\nflights2\n```\n:::\n\n\nThen, to add the full airline name, we combine the `airlines` and `flights2` data tables using `left_join()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 %>%\n   left_join(airlines, by = \"carrier\")\n```\n:::\n\n\nRefer more details: https://r4ds.had.co.nz/relational-data.html\n\n# **Relational data**\n\nSuppose we have two data tables x and y.\n\n-   **inner_join(x,y) -** keeps observations common to `x`and `y`.\n\n-   **left_join(x,y)** - keeps all observations in `x`.\n\n-   **right_join(x,y)** - keeps all observations in `y`.\n\n-   **full_join(x,y) -** keeps all observations in `x` and `y`.\n\n-   **semi_join(x, y)** - keeps all observations in `x` that have a match in `y`.\n\n-   **anti_join(x, y)** - drops all observations in `x` that have a match in `y`.\n\n# Class work\n\nCreate two data sets **student_residence** and **student_transport** as below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating student_residence data set\nset.seed(123)\nstudent_residence <- data.frame(student = seq(1, 6),\ndistance = runif(6, 3, 10))\n# Creating student_transport data set \nstudent_transport <- data.frame(student = seq(1, 7, by = 2),transport = c(\"Bus\", \"Carpool\", \"Walk\", \"Bus\"))\n```\n:::\n\n\nUsing `dplyr` package, apply `inner_join()`, `left_join()`, `right_join()` and `full_join()` to the above data sets, and interpret the results.\n\n# Must learn\n\nModeling Relational Data in R with ReDaMoR: https://cran.r-project.org/web/packages/ReDaMoR/vignettes/ReDaMoR.html#1_Introduction\n\nThe [datamodelr](https://github.com/bergant/datamodelr) R package provides tools to document relational data.\n\nImporting data from Relational Databases: https://www.projectpro.io/data-science-in-r-programming-tutorial/r-tutorial-importing-data-from-relational-database\n\n# More Details\n\n-   [Data Carpentry](http://datacarpentry.org/), 2017-2018, `dplyr` package, https://datacarpentry.org/R-genomics/04-dplyr.html#data_manipulation_using_dplyr\n\n-   dplyr : https://dplyr.tidyverse.org/\n\n-   dplyr tutorial : https://www.listendata.com/2016/08/dplyr-tutorial.html\n\n-   Data with dplyr : https://econ.suffolk.edu/dplyr/\n\n-   dplyr flipbook: https://econ.suffolk.edu/slides/dplyr-summarize/#1\n\n-   R for Data Science: https://r4ds.had.co.nz/relational-data.html\n\n-   Relational data models: https://cran.rstudio.com/web/packages/dm/vignettes/howto-dm-theory.html\n\n\\\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/htmlwidgets-1.5.3/htmlwidgets.js\"></script>\r\n<script src=\"../../../site_libs/viz-1.8.2/viz.js\"></script>\r\n<link href=\"../../../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../site_libs/grViz-binding-1.0.6.9000/grViz.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}