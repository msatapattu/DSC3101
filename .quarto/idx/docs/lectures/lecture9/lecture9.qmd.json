{"title":"DSC 3091- Advanced Statistics Applications I","markdown":{"yaml":{"title":"DSC 3091- Advanced Statistics Applications I","subtitle":"Data Wrangling II","author":"Prof. P. Wijekoon","institute":"Department of Statistics and Computer Science","format":{"revealjs":{"large":true,"theme":["beige","custom.scss"],"slide-number":true,"chalkboard":{"theme":"whiteboard"}}},"editor":"visual"},"headingText":"**Data manipulation with `dplyr`**","containsRefs":false,"markdown":"\n\n\n-   The package `dplyr` was written by the most popular R programmer Hadley Wickham who has written many useful R packages.\n\n-   The package contains a set of functions (or \"verbs\") that perform common data manipulation operations such as filtering for rows, selecting specific columns, re-ordering rows, adding new columns and summarizing data.\n\n-   Hence, it is called a grammar of data manipulation.\n\n# **Data manipulation with `dplyr`**\n\nThe functions (verbs) in the package `dplyr` are\n\n| Function                                                              | Description          | **Equivalent SQL** |\n|------------------|------------------------------|------------------------|\n| [`select()`](https://dplyr.tidyverse.org/reference/select.html)       | Selecting variables  | SELECT             |\n| [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)       | Filter (subset) rows | WHERE              |\n| [`group_by()`](https://dplyr.tidyverse.org/reference/)                | Group the data       | GROUP BY           |\n| [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html) | Summarise data       | \\-                 |\n| [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)     | Sort the data        | ORDER BY           |\n| [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)       | Create new variables | COLUMN ALIAS       |\n| [`join()`](https://dplyr.tidyverse.org/reference/)                    | Joining data tables  | JOIN               |\n\n# **Data manipulation with `dplyr`**\n\nTo understand these functions, we use the `starwars` data set in the dplyr package:\n\n```{r echo=T}\nlibrary(dplyr)\nlibrary(tibble)\nas_tibble(starwars)\n\n```\n\n# **Data manipulation with `dplyr`**\n\nNow we select the data related to species `Droid` using [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) function as below:\n\n```{r echo=T}\nlibrary(dplyr)\nstarwars %>% \n  filter(species == \"Droid\")\n\n```\n\n# **Data manipulation with `dplyr`**\n\nNow we use [`select()`](https://dplyr.tidyverse.org/reference/select.html) function to select some specific variables.\n\n```{r echo=T}\nstarwars %>% \n  select(name, ends_with(\"color\"))\n\n```\n\n# **Data manipulation with `dplyr`**\n\nTo create a new variable called bmi using the existing variables mass and height, we use [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) function, and select some specific variables.\n\n```{r echo=T}\nstarwars %>% \n  mutate(name, bmi = mass / ((height / 100)  ^ 2)) %>%\n  select(name:mass, bmi)\n\n\n```\n\n# **Data manipulation with `dplyr`**\n\nUse [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) function to arrange the variable `mass` in ascending order as `arrange(mass)`, and to arrange in descending order, use `arrange(desc(mass))` as below:\n\n```{r echo=T}\nstarwars %>% \n  arrange(desc(mass))\n\n```\n\n# **Data manipulation with `dplyr`**\n\nNow, we use [`summarise()`](https://dplyr.tidyverse.org/reference/summarise) function to get some summaries of data.\n\n```{r echo=T}\nstarwars %>%\n    group_by(species) %>%\n  summarise(\n    n = n(),\n    mean_mass = mean(mass, na.rm = TRUE))\n\n```\n\n# **Data manipulation with `dplyr`**\n\nNow, we filter the observations from the summarise data with n \\> 1 and mean_mass \\> 50.\n\n```{r echo=T}\nstarwars %>%\n  group_by(species) %>%\n  summarise(\n    n = n(),\n    mean_mass = mean(mass, na.rm = TRUE)\n  ) %>%\n  filter(\n    n > 1,\n    mean_mass > 50\n)\n```\n\n# Class works\n\nThe sampledata.csv contains income generated by states in USA from year 2002 to 2015. Download the data set by clicking on this link - [**Dataset**](https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv) and then right click and hit Save as option.\n\n\\(a\\) Selects variables from \"Index\" to \"Y2006\".\n\n\\(b\\) Drop variables \"Index\", and \"State\" variables from data.\n\n\\(c\\) Filter rows in which Index is equal to A.\n\n\\(d\\) Filter rows having 'A' and 'C' in column 'Index'.\n\n\\(e\\) Filter rows 'A' and 'C' from 'Index' **and** income greater than 1.2 million in Year 2006.\n\n------------------------------------------------------------------------\n\n\\(f\\) Filter rows 'A' and 'C' from 'Index' **or** income greater than 1.2 million in Year 2006.\n\n\\(g\\) Find the mean and median for the variable Y2012.\n\n\\(h\\) Find mean and median of Y2011 and Y2012.\n\n\\(i\\) Arrange variable Y2011 by variable Index in ascending order.\n\n\\(j\\) Calculate count and mean of variables Y2011 and Y2012 by variable Index.\n\n\\(k\\) Calculate the variable rate=Y2011/Y2012.\n\n\\(l\\) Calculate the cumulative sum of Y2011 and assign it to total, and select variables index, Y2011 and total.\n\n# Class works\n\n```{r echo=T}\nlibrary(readr)\nmydata=read_csv(\"C:/D/Lecture Notes/Multivariate methods/categorical data analysis/lecture9/sampledata.csv\")\nlibrary(tibble)\nmydata=as.tibble(mydata)\nmydata\n```\n\n------------------------------------------------------------------------\n\n\\(a\\) Selects variables \"Index\" to \"Y2006\".\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  select (Index:Y2006)\n```\n\n------------------------------------------------------------------------\n\n\\(b\\) Drop variables \"Index\", and \"State\" variables from data.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  select (-Index, -State)\n\n```\n\n------------------------------------------------------------------------\n\n\\(c\\) Filter rows in which Index is equal to A.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  filter(Index == \"A\")\n```\n\n------------------------------------------------------------------------\n\n\\(d\\) Filter rows having 'A' and 'C' in column 'Index'.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  filter(Index %in% c(\"A\", \"C\"))\n```\n\n------------------------------------------------------------------------\n\n\\(e\\) Filter rows 'A' and 'C' from 'Index' **and** income greater than 1.2 million in Year 2006.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  filter(Index %in% c(\"A\", \"C\")& Y2006 >= 1200000)\n```\n\n------------------------------------------------------------------------\n\n\\(f\\) Filter rows 'A' and 'C' from 'Index' **or** income greater than 1.2 million in Year 2006.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  filter(Index %in% c(\"A\", \"C\")| Y2006 >= 1200000)\n```\n\n------------------------------------------------------------------------\n\n\\(g\\) Find the mean and median for the variable Y2012.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  summarise(mean2012 = mean(Y2012), median2012=median(Y2012))\n```\n\n------------------------------------------------------------------------\n\n\\(h\\) Find mean and median of Y2011 and Y2012.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  summarise(mean2011=mean(Y2011), mean2012=mean(Y2012),median2011=median(Y2011), median2012=median(Y2012), na.rm = TRUE)\n\n\n\n```\n\n------------------------------------------------------------------------\n\n\\(i\\) Arrange variable Y2011 by variable Index in ascending order.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  arrange(Index, Y2011)\n# To arrange decending order use desc(Y2011).\n```\n\n------------------------------------------------------------------------\n\n\\(j\\) Calculate count and mean of variables Y2011 and Y2012 by variable Index.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  group_by(Index) %>%\n  summarise(n = n(),mean2011=mean(Y2011), mean2012=mean(Y2012)\n  )\n```\n\n------------------------------------------------------------------------\n\n\\(k\\) Calculate the variable rate=Y2011/Y2012.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  mutate(rate=Y2011/Y2012)\n```\n\n------------------------------------------------------------------------\n\n\\(l\\) Calculate the cumulative sum of Y2011 and assign it to total, and select variables index, Y2011 and total.\n\n```{r echo=T}\nlibrary(dplyr)\nmydata %>%\n  mutate(total=cumsum(Y2011))%>% \n  select(Index,Y2011, total)\n```\n\n# **Relational data**\n\nSuppose we have created data tables which are related to each other. These type of data tables are called relational data. When working with relational data we may want to combine information from different data tables. That can be done in different ways using `dplyr` package.\n\nThis concept is similar to the *relational* database management system (or `RDBMS`) using `SQL`. Using R, we can do this by using `dplyr` package, which is somewhat easier to use than `SQL`, since `dplyr` is specialised to do data analysis.\n\n# **Relational data**\n\n::: columns\n::: {.column width=\"40%\"}\nWe have already worked with `flights` data table in `nycflights13` package. In the same package, there are 4 other tibbles (airlines, airports, planes, weather) which are related with `flights` data table.\n:::\n\n::: {.column width=\"60%\"}\n![](rela.png)\n:::\n:::\n\n# **Relational data**\n\n-   `flights` connects to `planes` via `tailnum` variable.\n\n-   `flights` connects to `airlines` via `carrier` variable.\n\n-   `flights` connects to `airports` via the `origin` and `dest` variables.\n\n-   `flights` connects to `weather` via `origin`, `year`, `month`, `day` and `hour` variables.\n\n```{r echo=T, eval=F}\n# Check variables in each tibble\nlibrary(tidyverse)\nlibrary(nycflights13)\nflights\nairlines\nairports\nplanes\nweather\n```\n\n# **Relational data**\n\nTo connect each pair of tables we use unique identifiers called **keys**.\n\n-   **primary key** - uniquely identifies an observation in its own table.\n\n-   **foreign key** - uniquely identifies an observation in another table.\n\n-   A variable can be both a primary key *and* a foreign key.\n\n-   A primary key and the corresponding foreign key in another table form a **relation**\n\n-   Relations are typically one-to-many.\n\n# **Relational data**\n\nUse [`dm` package](https://cynkra.github.io/dm/articles/tech-dm-draw.html) to get some details about the data set.\n\n```{r echo=T}\nlibrary(dm)\ndm <- dm_nycflights13(cycle = TRUE)\ndm %>%\n  dm_draw()\n\n```\n\n------------------------------------------------------------------------\n\nTo get details all primary keys use the following:\n\n```{r echo=T}\n#To get all primary keys\ndm %>%\n  dm_get_all_pks()\n\n```\n\n------------------------------------------------------------------------\n\nUse the following codes to check the suitability of each variable of a data set to serve as a primary key.\n\n```{r echo=T}\ndm %>%\n  dm_enum_pk_candidates(airports)\n\n```\n\n------------------------------------------------------------------------\n\n-   We can identify foreign keys by using the function `dm_enum_fk_candidates()`.\n\n```{r echo=T}\ndm %>%\n  dm_enum_fk_candidates(flights, airlines)\n\n```\n\n------------------------------------------------------------------------\n\n-   We can extract a summary of all foreign key relations present in a `dm` object using `dm_get_all_fks()`:\n\n```{r echo=T}\ndm %>% \n  dm_get_all_fks()\n```\n\n# **Relational data**\n\nNow, we select only 6 variables from `flights` data set to work with easily, and name it as `flights2`.\n\n```{r echo=T, eval=F}\nflights2 <- flights %>% \n  select(year:day, hour, tailnum, carrier)\nflights2\n```\n\nThen, to add the full airline name, we combine the `airlines` and `flights2` data tables using `left_join()` function.\n\n```{r echo=T, eval=F}\nflights2 %>%\n   left_join(airlines, by = \"carrier\")\n```\n\nRefer more details: https://r4ds.had.co.nz/relational-data.html\n\n# **Relational data**\n\nSuppose we have two data tables x and y.\n\n-   **inner_join(x,y) -** keeps observations common to `x`and `y`.\n\n-   **left_join(x,y)** - keeps all observations in `x`.\n\n-   **right_join(x,y)** - keeps all observations in `y`.\n\n-   **full_join(x,y) -** keeps all observations in `x` and `y`.\n\n-   **semi_join(x, y)** - keeps all observations in `x` that have a match in `y`.\n\n-   **anti_join(x, y)** - drops all observations in `x` that have a match in `y`.\n\n# Class work\n\nCreate two data sets **student_residence** and **student_transport** as below:\n\n```{r echo=T, eval=F}\n# Creating student_residence data set\nset.seed(123)\nstudent_residence <- data.frame(student = seq(1, 6),\ndistance = runif(6, 3, 10))\n# Creating student_transport data set \nstudent_transport <- data.frame(student = seq(1, 7, by = 2),transport = c(\"Bus\", \"Carpool\", \"Walk\", \"Bus\"))\n\n```\n\nUsing `dplyr` package, apply `inner_join()`, `left_join()`, `right_join()` and `full_join()` to the above data sets, and interpret the results.\n\n# Must learn\n\nModeling Relational Data in R with ReDaMoR: https://cran.r-project.org/web/packages/ReDaMoR/vignettes/ReDaMoR.html#1_Introduction\n\nThe [datamodelr](https://github.com/bergant/datamodelr) R package provides tools to document relational data.\n\nImporting data from Relational Databases: https://www.projectpro.io/data-science-in-r-programming-tutorial/r-tutorial-importing-data-from-relational-database\n\n# More Details\n\n-   [Data Carpentry](http://datacarpentry.org/), 2017-2018, `dplyr` package, https://datacarpentry.org/R-genomics/04-dplyr.html#data_manipulation_using_dplyr\n\n-   dplyr : https://dplyr.tidyverse.org/\n\n-   dplyr tutorial : https://www.listendata.com/2016/08/dplyr-tutorial.html\n\n-   Data with dplyr : https://econ.suffolk.edu/dplyr/\n\n-   dplyr flipbook: https://econ.suffolk.edu/slides/dplyr-summarize/#1\n\n-   R for Data Science: https://r4ds.had.co.nz/relational-data.html\n\n-   Relational data models: https://cran.rstudio.com/web/packages/dm/vignettes/howto-dm-theory.html\n\n\\\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","css":["../lectures.css"],"output-file":"lecture9.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.0.38","auto-stretch":true,"editor":"visual","sidebar":"lectures","search":false,"title":"DSC 3091- Advanced Statistics Applications I","subtitle":"Data Wrangling II","author":"Prof. P. Wijekoon","institute":"Department of Statistics and Computer Science","large":true,"theme":["beige","custom.scss"],"slideNumber":true,"chalkboard":{"theme":"whiteboard"}}}}}