{"title":"DSC 3091- Advanced Statistics Applications I","markdown":{"yaml":{"title":"DSC 3091- Advanced Statistics Applications I","subtitle":"Data Wrangling","author":"Prof. P. Wijekoon","institute":"Department of Statistics and Computer Science","format":{"revealjs":{"large":true,"theme":["beige","custom.scss"],"slide-number":true,"chalkboard":{"theme":"whiteboard"}}},"editor":"visual"},"headingText":"Data Wrangling","containsRefs":false,"markdown":"\n\n\nData wrangling makes it easier to get your data into R in a useful form for visualisation and modelling. Here, we discuss the following three tools.\n\n-   **tibbles** the variant of the data frame.\n\n-   **Data import** in rectangular formats.\n\n-   **tidy data** a consistent way of storing your data that makes transformation, visualisation, and modelling easier.\n\n# Tibbles\n\nTibbles are data frames, which makes easier for data wrangling. Tibbles can be created using the `tibble` package. Tibbles have an enhanced [`print()`](https://rdrr.io/r/base/print.html) method which can be used with large datasets containing complex objects.\n\n```{r echo=TRUE}\nlibrary(tibble)\nas_tibble(iris)\n```\n\n# Tibbles\n\nYou can create a new tibble from individual vectors with `tibble()` function.\n\n```{r echo=TRUE}\nlibrary(tibble)\ntibble(\n  x = 1:5, \n  y = 1, \n  z = x ^ 2 + y\n)\n```\n\n# Tibbles vs. data.frame\n\nTibbles shows only the first 10 rows, and all the columns fit on screen, which makes it much easier to work with large data. In addition to its name, each column reports its data type.\n\n```{r echo=TRUE}\ntibble(\n  a = lubridate::now(),\n  b = lubridate::today(),\n  c = 1:1e3,\n  d = runif(1e3),\n  e = sample(letters, 1e3, replace = TRUE)\n)\n```\n\n# Tibbles vs. data.frame\n\nConsider the below `flights` data set which shows on-time data for all flights that departed NYC in 2013, in `nycflights13` package. If you want to see only 5 observations, use the below code. The option `width =` `Inf` shows all variables.\n\n```{r echo=TRUE}\nnycflights13::flights %>% \n  print(n = 5, width = Inf)\n```\n\n# Tibbles vs. data.frame\n\nTo see the data in the default output of a tibble, use the below codes:\n\n```{r echo=TRUE}\noptions(tibble.width = Inf) \nnycflights13::flights %>% \n  print()\n```\n\n# Data import\n\nTo read plain-text rectangular files into R, use the `readr` package, which is part of the core tidyverse.\n\n-   `read_csv()` reads comma delimited files, `read_csv2()` reads semicolon separated files, `read_tsv()` reads tab delimited files, and `read_delim()` reads in files with any delimiter.\n\n-   `read_fwf()` reads fixed width files. You can specify fields either by their widths with `fwf_widths()` or their position with `fwf_positions()`. `read_table()` reads a common variation of fixed width files where columns are separated by white space.\n\n# Data import\n\n-   `read_log()` reads Apache style log files. (But also check out [webreadr](https://github.com/Ironholds/webreadr) which is built on top of `read_log()` and provides many more helpful tools.)\n\nSuppose you have a csv file named `heights` in a folder called data. Then, to read it use\n\n`heights<-read_csv(\"data/heights.csv\")`\\\nIf some meta data included in the first two lines of the data set, and you want to skip those two lines, use\n\n`heights<-read_csv(\"data/heights.csv\", skip=2)`\n\n# Data import\n\n**Example**\n\n```{r echo=T}\nlibrary(readr)\nread_csv(\"The first line of metadata\n  The second line of metadata\n  x,y,z\n  1,2,3\", skip = 2)\n```\n\nIf there is a comment in the data set,use the below codes:\n\n```{r echo=T}\nread_csv(\"# A comment I want to skip\n  x,y,z\n  1,2,3\", comment = \"#\")\n```\n\n# Data import\n\nIf the variable names are not included in the data set, you can specify them and read the data as\\\n`heights<-read_csv(\"data/heights.csv\", col_names = c(\"x\", \"y\", \"z\"))`\n\nIf the missing values are indicated as \".\" in the data set, you can change them to NA as below:\\\n`heights<-read_csv(\"data/heights.csv\", NA= \".\")`\n\n# Data import\n\nIf you data contains other characters such as \\$100, 20% or etc, then to convert them to data use `parse_number()` function.\n\n**Examples**\n\n```{r echo=T}\nparse_number(\"$100\")\nparse_number(\"20%\")\nparse_number(\"It cost $123.45\")\nparse_number(\"$123,456,789\")\n```\n\n# Data import\n\nTo write dates in a given format, you can use `parse_date()` function.\n\n```{r echo=T}\nparse_date(\"01/02/15\", \"%m/%d/%y\")\nparse_date(\"01/02/15\", \"%d/%m/%y\")\nparse_date(\"01/02/15\", \"%y/%m/%d\")\n```\n\n# Data import\n\n**Date abbreviations**\n\n+--------------+--------------------------------------------------------------+\n| **Year**     | `%Y` - (4 digits)                                            |\n|              |                                                              |\n|              | `%y` - (2 digits); 00-69 -\\> 2000-2069, 70-99 -\\> 1970-1999. |\n+--------------+--------------------------------------------------------------+\n| **Month**    | `%m` - (2 digits)                                            |\n|              |                                                              |\n|              | `%b` - (abbreviated name, like \"Jan\")                        |\n|              |                                                              |\n|              | `%B` - (full name, \"January\")                                |\n+--------------+--------------------------------------------------------------+\n| **Day**      | `%d` - (2 digits)                                            |\n+--------------+--------------------------------------------------------------+\n\n# Tidy Data\n\nIn tidy data\n\n-   each variable forms a column\n\n-   each observation forms a row\n\n-   each cell is a single measurement\n\nWhen working with tidy data, we can use the same tools in similar ways for different data sets.\n\n`dplyr`, `ggplot2`, and all the other packages in the `tidyverse` are designed to work with tidy data.\n\n# Tidy Data\n\n::: columns\n::: {.column width=\"50%\"}\n![](im1.png)\n:::\n\n::: {.column width=\"50%\"}\n![](im2.png)\n:::\n:::\n\n# Tidy Data\n\nWhat are the advantages of your data to be tidy?\n\n-   The general advantage is that you can select one consistent way to store your data. If you have a consistent data structure, it's easier to learn the tools that work with it since they have an underlying uniformity.\n\n-   When variables are in columns, you can use the vectorised nature of R. Most of the built-in R functions work with vectors of values.\n\n# Tidy Data\n\nRun the following codes and identify which data set/s is/are tidy.\n\n```{r echo=T, eval=F}\nlibrary(tidyverse)\ntable1\ntable2\ntable3\ntable4a\ntable4b\n```\n\nThese are all representations of the same underlying data, but only `table1` is tidy.\n\n# Tidy Data\n\n**Examples**\n\nRun the following codes.\n\n::: columns\n::: {.column width=\"50%\"}\n```{r echo=T, eval=FALSE}\n# Compute rate per 10,000\nlibrary(dplyr)\ntable1 %>% \n  mutate(rate = cases / population * 10000)\n\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r echo=T, eval=FALSE}\n# Compute cases per year\ntable1 %>% \n  count(year, wt = cases)\n```\n:::\n:::\n\n# Tidy Data\n\nIf we have untidy data, how do we make them tidy?\n\nTo do this, you can use the functions `pivot_longer()` and `pivot_wider()` in tidyr.\n\n```{r echo=T}\nlibrary(tidyverse)\ntable4a\n```\n\nHere, the column names `1999` and `2000` represent values of the `year` variable, and the values of these columns represent values of the `cases` variable. Note that each row represents two observations, but not one.\n\n# Tidy Data\n\nSince **one variable spreads across multiple columns** in `table4a` , we use `pivot_longer()` function to make it tidy as below:\n\n```{r echo=T}\nlibrary(dplyr)\ntable4a %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n```\n\n# Tidy Data\n\nIn table2 data set, **one observation is scattered across multiple rows**. Therefore, we have to use `pivot_wider()` function to make it tidy.\n\n::: columns\n::: {.column width=\"52%\"}\n```{r echo=T}\nlibrary(tidyverse)\ntable2\n```\n:::\n\n::: {.column width=\"48%\"}\n```{r echo=T}\ntable2 %>%\n    pivot_wider(names_from = type, values_from = count)\n```\n:::\n:::\n\n# Tidy Data\n\n::: columns\n::: {.column width=\"52%\"}\nIn the following data set, we can separate the rate variables to two variables.\n\n```{r echo=T}\nlibrary(tidyverse)\ntable3\n```\n:::\n\n::: {.column width=\"48%\"}\nWe separate the rate variables to `cases` and `population` variables.\n\n```{r echo=T}\ntable3 %>% \n  separate(rate, into = c(\"cases\", \"population\"), convert = TRUE)\n# Add convert=TRUE to preserve the data type.\n```\n:::\n:::\n\n# Tidy Data\n\nWe can also use `sep` option with `separate` function to separate integers.\n\n```{r echo=T}\ntable3 %>% \n  separate(year, into = c(\"century\", \"year\"), sep = 2)\n```\n\n# Tidy Data\n\nUsing `unite()` function we can combine multiple columns into a single column.\n\nNow, we use `unite()` function to rejoin the *century* and *year* columns that we created in the previous example.\n\n```{r echo=T}\nlibrary(tidyverse)\ntable5<-table3 %>% \n  separate(year, into = c(\"century\", \"year\"), sep = 2)\ntable5 %>% \n  unite(new, century, year, sep = \"\")# Run without sep=\"\" option, and see the difference\n```\n\n# Tidy Data (Missing values)\n\nA value can be missing in two ways, **Explicitly** (i.e. flagged with `NA`), **Implicitly** (i.e. simply not present in the data).\n\nIn this data set, the return for the fourth quarter of 2015 is explicitly missing, and the return for the first quarter of 2016 is implicitly missing\n\n::: columns\n::: {.column width=\"70%\"}\n```{r echo=T, eval=FALSE}\nstocks <- tibble(\nyear= c(2015, 2015, 2015, 2015, 2016, 2016, 2016),\nqtr = c(   1,    2,    3,    4,    2,    3,    4),\nreturn = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)\n)\nstocks\n```\n:::\n\n::: {.column width=\"30%\"}\n```{r echo=F, eval=TRUE}\nstocks <- tibble(\nyear= c(2015, 2015, 2015, 2015, 2016, 2016, 2016),\nqtr = c(   1,    2,    3,    4,    2,    3,    4),\nreturn = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)\n)\nstocks\n```\n:::\n:::\n\n# Tidy Data\n\nTo make missing values explicit in tidy data, we can use `complete()` function.\n\n```{r echo=T}\nstocks %>% \n  complete(year, qtr)\n```\n\n# Class work\n\n-   Make `table4b` data set tidy, and combine it with `table4a` data set.\n\n-   Refer the case study (12.6) shown in https://r4ds.had.co.nz/tidy-data.html, and understand the tools that we need to use for a real data set. Apply those tools to the COVID-19 confirmed data from John Hopkins University. You can access the data using the following codes:\n\n    `library(readr)`\\\n    `confirmed<-read_csv(\"https://raw.githubusercontent.com/`\n\n    `CSSEGISandData/COVID-19/master/csse_covid_19_data/`\n\n    `csse_covid_19_time_series/`\n\n    `time_series_covid19_confirmed_global.csv\")`\\\n    `head(confirmed)`\n\n# Some Useful Links ...\n\n-   Wickham, H (2014). *Tidy Data*. Journal of Statistical Software 58 (10). [jstatsoft.org/v59/i10/](http://www.jstatsoft.org/v59/i10/)\n\n-   Grolemund, G & Wickham, H (2016). R for Data Science, [https://r4ds.had.co.nz](https://r4ds.had.co.nz/)\n\n-   Introduction to Tidy Data in R: https://stat2labs.sites.grinnell.edu/Handouts/rtutorials/IntroTidyData.html\n\n-   tidyr: https://tidyr.tidyverse.org/\n\n-   A ModernDive into R and the Tidyverse: https://moderndive.com/index.html\n\n\\\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","css":["../lectures.css"],"output-file":"lecture8.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.0.38","auto-stretch":true,"editor":"visual","sidebar":"lectures","search":false,"title":"DSC 3091- Advanced Statistics Applications I","subtitle":"Data Wrangling","author":"Prof. P. Wijekoon","institute":"Department of Statistics and Computer Science","large":true,"theme":["beige","custom.scss"],"slideNumber":true,"chalkboard":{"theme":"whiteboard"}}}}}