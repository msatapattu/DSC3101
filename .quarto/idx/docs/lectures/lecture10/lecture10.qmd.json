{"title":"DSC 3091- Advanced Statistics Applications I","markdown":{"yaml":{"title":"DSC 3091- Advanced Statistics Applications I","subtitle":"Handling Missing Values and Data Visualization","author":"Prof. P. Wijekoon","institute":"Department of Statistics and Computer Science","format":{"revealjs":{"large":true,"theme":["beige","custom.scss"],"slide-number":true,"chalkboard":{"theme":"whiteboard"}}},"editor":"visual"},"headingText":"**Handling missing values**","containsRefs":false,"markdown":"\n\n\nAfter importing data, we have to clean them before visualizing or analysing them. A part of data cleaning we have discussed in the previous lectures.\n\nWhen cleaning data, identification of the missing values is also important. To do this, first find the proportion of missing values in each variable.\n\n------------------------------------------------------------------------\n\nConsider the `starwars` data set in the `dplyr` package, and obtain the proportion of missing values in each variable.\n\n```{r echo=T}\nlibrary(dplyr)\npropmiss <- colSums(is.na(starwars))/nrow(starwars)\nround(propmiss, 2)\n\n```\n\nNote that 51% of the birth_year values are missing. If this variable is not important for the data analysis, you can drop this variable.\n\n------------------------------------------------------------------------\n\nTo visualize the missing values, use the function `md.pattern()` in `mice` package as below:\n\n```{r echo=T}\nlibrary(mice)\nmd.pattern(starwars, rotate.names = T)\n```\n\n------------------------------------------------------------------------\n\nThe missing values in a data set can be handled in two ways.\n\n\\(i\\) **Listwise deletion** : Delete all observations which contain missing values.\n\nFirst, we remove birth_year variable, since it contains 51% of the missing values, and then delete observations in the other variables which contain missing values.\n\n```{r echo=T}\nnewstar1 <- starwars %>%\n  select(-birth_year)\nnewstar1 <- na.omit(newstar1)\npropmiss <- colSums(is.na(newstar1 ))/nrow(newstar1)\nround(propmiss, 2)\n```\n\n------------------------------------------------------------------------\n\n\\(ii\\) **Imputation** : Replace missing values with suitable values. Refer R packages as `VIM`, `mice`, `Amelia`, `Hmisc`, `mi` and `missForest` for possible options. A details tutorial of using these packages are given [here](https://www.analyticsvidhya.com/blog/2016/03/tutorial-powerful-packages-imputing-missing-values/).\n\nIn the following example, we use `VIM` package which impute missing values using the 5 nearest neighbors. Since, films, vehicles and starships are lists, we remove those variables from the data set before impute values.\n\n```{r echo=T}\nnewstar2 <- starwars %>%\n  select(-films, -vehicles, -starships)\nlibrary(VIM)\nnewstar2 <- kNN(newstar2, k=5)\npropmiss <- colSums(is.na(newstar2))/nrow(newstar2)\nround(propmiss, 2)\n```\n\n# Class works 1\n\nUse the `airquality` data set in the datasets package to do the following:\n\n\\(i\\) Identify the variables in this data set, and get summary statistics using `summary()` function. What are the variables having missing values?\n\n\\(ii\\) Find the proportion of missing values in each variable.\n\n\\(iii\\) Use the `md.pattern()` function in `mice` package to visualize missing values.\n\n\\(iv\\) Use `knn()` function in `VIM` package to impute the missing values, and visualize the data again using `md.pattern()`function.\n\n```{r echo=F, eval=F}\nlibrary(datasets)\nlibrary(dplyr)\nglimpse(airquality)\nsummary(airquality)\npropmiss <- colSums(is.na(airquality))/nrow(airquality)\nround(propmiss, 2)\nlibrary(mice)\nmd.pattern(airquality)\nlibrary(VIM)\nairquality_new <- kNN(airquality, k=5)\nmd.pattern(airquality_new)\n```\n\n# **Data Visualization using `ggplot2`**\n\nThe R package `ggplot2` produces publication quality graphics which has an underlying grammar that allows you to create graphs by combining independent components.\n\nThe graphics of `ggplot2` start with a **layer** that shows the raw data. Then, you can add the other layers which are the collection of geometric elements and statistical transformations.\n\nGeometric elements are identified as **geom**s, which usually represent points, lines, polygons, etc in the plot.\n\n------------------------------------------------------------------------\n\nStatistical transformations are given as **stat**s which summarise the data.\n\nThe coordinate system of the graph is represented by **coord**, which also provides axes and gridlines of the graph.\n\nThe term **facet** is used to break up and display subsets of data.\n\nFor the graph, a **theme** also can be used with specific font size and background colour etc.\n\nTo understand the concepts of `ggplot2`, we use the `mpg` data set in `ggplot2` package. This data set includes the fuel economy of popular car models in 1999 and 2008, collected by the US Environmental Protection Agency.\n\n------------------------------------------------------------------------\n\nCheck the variables of the data set, and find whether there are any missing values.\n\nAny `ggplot2` plot has **data**, a set of **aesthetic mappings** and at least one layer with a **geom** function.\n\nSuppose we want to draw a scatter plot for engine size (`displ`) vs. fuel economy (`hwy`).\n\n::: columns\n::: {.column width=\"50%\"}\n```{r echo=T, eval=F}\nlibrary(ggplot2)\nmpg %>%\n  ggplot(aes(x = displ, y = hwy)) + \n  geom_point()\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r}\nlibrary(ggplot2)\nmpg %>%\n  ggplot(aes(x = displ, y = hwy)) + \n  geom_point()\n```\n:::\n:::\n\n------------------------------------------------------------------------\n\nHere, we call data first, and then aesthetic mappings are given in `ggplot()` function. Then, **geom** layer is added using `+` sign. Refer the other **geom** elements here: https://ggplot2.tidyverse.org/reference/index.html.\n\nTo add more variables to the plot, we can use **colour, size,** and **shape** as other aesthetics.\n\n::: columns\n::: {.column width=\"40%\"}\n```{r echo=T, eval=F}\nmpg %>%\n  ggplot(aes(displ, hwy, colour = class)) + \n  geom_point()\n```\n:::\n\n::: {.column width=\"60%\"}\n```{r}\nmpg %>%\n  ggplot(aes(displ, hwy, colour = class)) + \n  geom_point()\n```\n:::\n:::\n\n------------------------------------------------------------------------\n\nChange the previous plot using `shape = drv` or `size = cyl` as aesthetics.\n\nDon't add many aesthetics to the same plot. Instead, draw simple plots to understand the relationships.\n\nThe aesthetics **colour** and **shape** work well with categorical variables, and the aesthetics **size** works well for continuous variables.\n\nAlso, if you have a large data set or you need to compare distributions separately for different categories, use faceting.\n\n# Class works 2\n\nUse the iris data set in the datasets package to do the following:\n\n\\(i\\) Identify the variables in this data set.\n\n\\(ii\\) Draw a scatter plot for Sepal.Length vs. Sepal.Width using `ggplot2`.\n\n\\(iii\\) Add Species variable to both color and shape.\n\n```{r echo=F, eval=F}\nlibrary(ggplot2)\niris %>%\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width))+\n  geom_point(aes(color=Species, shape=Species))+\n  xlab(\"Sepal Length\") +  ylab(\"Sepal Width\") +\n  ggtitle(\"Scatter plot of Sepal Length vs Sepal Width\")\n```\n\n------------------------------------------------------------------------\n\nTo display additional **categorical** variable on a plot, we can use faceting. This is useful when having a large number of observations.\n\nFaceting creates a set of graphics by splitting the data into subsets and displaying them in the same graph.\n\nThere are two types of faceting: (i) grid faceting and (ii) wrapped faceting.\n\n```{r echo=T}\nmpg %>%\n  ggplot(aes(displ, hwy)) + \n  geom_point() + \n  facet_wrap(~class)\n```\n\n# Other `geom()` functions\n\n| Function                                 | Description                                                     |\n|:------------------------------|:----------------------------------------|\n| `geom_smooth`                            | Add a smooth curve to the scatter plot with its standard error. |\n| `geom_boxplot()`                         | Draw a box and whisker plot.                                    |\n| `geom_histogram()` and `geom_freqpoly()` | Draw a histogram and a frequency polygon.                       |\n| `geom_bar()`                             | Draw Bar Charts for categorical variables.                      |\n| `geom_path()` and geo`m_line()`          | Draw path and line plots to connect data points.                |\n\n------------------------------------------------------------------------\n\nAdding a smooth curve with confidence interval\n\n```{r echo=T}\nmpg %>%\n  ggplot(aes(displ, hwy)) + \n  geom_point() + \n  geom_smooth()\n```\n\n------------------------------------------------------------------------\n\n-   Here, the final layer is the smooth curve with confidence interval. If you want to hide the confidence interval, use `geom_smooth(se = FALSE)`.\n\n-   The default method of the smooth curve fitting is `method = \"loess\"`, which uses a smooth local polynomial regression, when n \\<= 1000.\n\n-   For large n (n \\> 1000), an alternative smoothing algorithm is used.\n\n`method = \"lm\"` fits a linear model,\n\n`method = \"rlm\"` fits a robust fitting of linear models in which the outliers does not affect the fit. Load **MASS** package if you use this method.\n\n------------------------------------------------------------------------\n\nRefer the other options of `geom_smooth()`: https://ggplot2.tidyverse.org/reference/geom_smooth.html\n\nTo compare the distribution of continuous variable among categories of a categorical variable, draw jittered plots, box-and-whisker plots and violin plots .\n\nJittered plots show all observations, and hence it is good for a relatively small datasets.\n\n```{r echo=T}\nmpg %>%\n  ggplot(aes(drv, hwy)) + geom_jitter()\n\n```\n\n------------------------------------------------------------------------\n\n```{r echo=T}\nmpg %>%\n  ggplot(aes(drv, hwy)) + geom_boxplot()\n```\n\n------------------------------------------------------------------------\n\n```{r echo=T}\nmpg %>%\n  ggplot(aes(drv, hwy)) + geom_violin()\n```\n\n------------------------------------------------------------------------\n\nTo show the distribution of a single variable, draw a histogram or frequency polygon.\n\nThe default number of bins is 30 in the `geom_histogram()` function. You can change this by setting the width of the bins with the `binwidth` argument.\n\n::: columns\n::: {.column width=\"50%\"}\n```{r echo=T}\nmpg %>%\n  ggplot(aes(hwy)) + \n  geom_histogram()\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r echo=T}\nmpg %>%\n  ggplot(aes(hwy)) + \n  geom_histogram(binwidth = 1)\n```\n:::\n:::\n\n# Class work 3\n\n\\(i\\) Draw a frequency polygon using `geom_freqpoly()` function.\n\n\\(ii\\) Set the `binwidth` to 1, and redraw it .\n\n\\(iii\\) Draw frequency polygons of `displ` variable for the categories of `drv` variable in one graph by setting `colour=drv` argument. Set the binwidth=0.5.\n\n\\(iv\\) Use faceting to draw histograms of `displ` variable for the categories of `drv` variable in one graph by setting `fill=drv` argument. Set the binwidth=0.5, and show all histograms in one column.\n\n::: columns\n::: {.column width=\"50%\"}\n```{r echo=F,eval=F}\nmpg %>%\n  ggplot(aes(hwy)) + geom_freqpoly()\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r echo=F,eval=F}\nmpg %>%\n  ggplot(aes(hwy)) + \n  geom_freqpoly(binwidth = 1)\n```\n:::\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n```{r echo=F,eval=F}\nmpg %>%\n  ggplot(aes(displ, colour = drv)) + \n  geom_freqpoly(binwidth = 0.5)\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r echo=F,eval=F}\nmpg %>%\n  ggplot(aes(displ, fill = drv)) + \n  geom_histogram(binwidth = 0.5) + \n  facet_wrap(~drv, ncol = 1)\n```\n:::\n:::\n\n# Themes\n\nThemes is used to control over the non-data elements like fonts, ticks, panel strips, and backgrounds of your plot.\n\n-   **theme_gray** : gray background color and white grid lines\n\n-   **theme_bw** : white background and gray grid lines\n\n-   **theme_linedraw** : black lines around the plot\n\n-   **theme_light** : light gray lines and axis\n\n-   **theme_minimal**: no background annotations\n\n-   **theme_classic** : theme with axis lines and no grid lines\n\n-   **theme_void**: Empty theme\n\n-   **theme_dark**(): dark background designed to make colours pop out\n\n------------------------------------------------------------------------\n\nConsider the following two plots\n\n::: columns\n::: {.column width=\"50%\"}\n```{r echo=T}\nmpg %>%\n  ggplot(aes(hwy)) + \n  geom_histogram(color=\"black\", fill=\"blue\", binwidth = 1)+\n  geom_vline(aes(xintercept=mean(hwy)),color=\"red\", linetype=\"dashed\", size=1)+\n  theme_bw()\n\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r echo=T}\nmpg %>%\n  ggplot(aes(hwy)) + \n  geom_histogram(color=\"black\", fill=\"blue\",binwidth = 1)+\n  geom_vline(aes(xintercept=mean(hwy)),color=\"red\", linetype=\"dashed\", size=1)+\n  theme_classic()\n```\n:::\n:::\n\nUse the other background themes and see the difference.\n\n------------------------------------------------------------------------\n\nIn the `mpg` data set, the variable `drv` represents the drive type ( f=front wheel, r=rear wheel, 4=4 wheel) of vehicles. We can draw histograms of `hwy` variable separately for the drive type in the same graph as below:\n\n```{r echo=T}\nmpg %>%\n  ggplot(aes(x=hwy, fill=drv, color=drv)) +\n  geom_histogram(alpha=0.5, position=\"identity\", binwidth = 1)+\n      theme_classic()\n```\n\n------------------------------------------------------------------------\n\nYou can change the position argument in a plot to use for overlapping points on the layer. The default value is \"stack\".Other possible values for the argument position are \"identity\"and \"dodge\".\n\nThe default legend position is right in ggplot. Some of the options to change the legend position are given below:\n\n`theme(legend.position=\"top\")` `theme(legend.position=\"bottom\")` `theme(legend.position=\"none\")` `theme(legend.position = c(0.8, 0.2))`\n\nChange the legend position of the previous plot using the above codes.\n\n------------------------------------------------------------------------\n\nTo change the legend title, text font style, and the background colour of the legend box, use the following codes:\n\n```{r echo=T}\np<-mpg %>%\n  ggplot(aes(x=hwy, fill=drv, color=drv)) +\n  geom_histogram(alpha=0.5, position=\"identity\", binwidth = 1)+\n          theme_classic()\np1<-p+theme(legend.title = element_text(colour=\"blue\", size=10, face=\"bold\"))\np2<-p1+theme(legend.text = element_text(colour=\"blue\", size=10, face=\"bold\"))\np2+theme(legend.background = element_rect(fill=\"lightgray\",size=0.5, linetype=\"solid\",                 colour =\"darkblue\"))\n\n```\n\n# Saving your plot\n\nSave your plot by assigning it to a plot object as below:\n\n```{r echo=T}\np <- mpg %>%\n    ggplot(aes(displ, hwy, colour = factor(cyl))) +\n  geom_point()\n# Save the plot as png \nggsave(\"plot.png\", p, width = 5, height = 5)\n```\n\n------------------------------------------------------------------------\n\nTo see the data sets in a loaded R package, go to\n\n**Environment tab ----\\> Global Environment**\n\nThen, select the specific package. Now, you can see the list of data sets in that package.\n\nOR else use the `datasets` function in the `vcdExtra` package as below:\n\n```{r echo=T}\nvcdExtra::datasets(\"ggplot2\")\n```\n\n# Class work 4\n\n\\(i\\) Load the iris data set, and use facet_wrap() to draw separate scatter plots of Petal.Length vs. Petal.Width for species. Add a smooth curve and a confidence interval to each scatter plot using the `method = \"rlm\"`. Add a suitable background theme for the plot.\n\n\\(ii\\) Draw a jittered plot to show the distribution of Petal.Length for each species. Use colour and shape arguments to separate each species. Add the classic background theme for the plot.\n\n\\(iii\\) Repeat (ii) to draw box plots. Add a dark background theme for the plot.\n\n------------------------------------------------------------------------\n\n\\(iv\\) Draw histograms of the variable Sepal.Length for species in the same graph. Set `binwidth` to 0.8, legend at the bottom, and add a background colour of the legend box\n\n\\(v\\) Use `scale_fill_discrete(labels=c( ))` to change the labels of the legend in all the above plots.\n\n# More Details\n\n-   `mice` R package: https://datascienceplus.com/imputing-missing-data-with-r-mice-package/\n\n-   ggplot2 by [Hadley Wickham](http://hadley.nz/), [Danielle Navarro](https://djnavarro.net/), and [Thomas Lin Pedersen](https://www.data-imaginist.com/): https://ggplot2-book.org/index.html\n\n-   Graphic Design with ggplot2, rstudio::conf(2022) Workshop by C�dric Scherer: https://rstudio-conf-2022.github.io/ggplot2-graphic-design/\n\n-   ggplot themes and background colour: http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements\n\n------------------------------------------------------------------------\n\n-   ggplot2 legends: http://www.sthda.com/english/wiki/ggplot2-legend-easy-steps-to-change-the-position-and-the-appearance-of-a-graph-legend-in-r-software\n\n-   ggplot legend title, position and labels: https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/\n\n-   Data Visualization with ggplot2: https://www.publichealth.columbia.edu/sites/default/files/media/fdawg_ggplot2.html\n\n-   ggplot2 - Essentials: http://www.sthda.com/english/wiki/ggplot2-essentials\n\n-   Colortool: http://www.sthda.com/english/wiki/the-elements-of-choosing-colors-for-great-data-visualization-in-r\n\n------------------------------------------------------------------------\n\n-   Gramme of Graphics: https://pkg.garrickadenbuie.com/gentle-ggplot2/#1\n\n-   Dealing with missing values: https://medium.com/coinmonks/dealing-with-missing-data-using-r-3ae428da2d17\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","css":["../lectures.css"],"output-file":"lecture10.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.0.38","auto-stretch":true,"editor":"visual","sidebar":"lectures","search":false,"title":"DSC 3091- Advanced Statistics Applications I","subtitle":"Handling Missing Values and Data Visualization","author":"Prof. P. Wijekoon","institute":"Department of Statistics and Computer Science","large":true,"theme":["beige","custom.scss"],"slideNumber":true,"chalkboard":{"theme":"whiteboard"}}}}}